# Generated by Django 5.1.11 on 2025-07-24 18:26

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('subdomain', models.SlugField(max_length=100, unique=True, verbose_name='Subdomain')),
                ('schema_name', models.CharField(blank=True, max_length=63, null=True, unique=True, verbose_name='Schema Name')),
                ('contact_email', models.EmailField(blank=True, max_length=254, verbose_name='Contact Email')),
                ('contact_phone', models.CharField(blank=True, max_length=20, verbose_name='Contact Phone')),
                ('technical_contact_email', models.EmailField(blank=True, max_length=254, verbose_name='Technical Contact Email')),
                ('billing_contact_email', models.EmailField(blank=True, max_length=254, verbose_name='Billing Contact Email')),
                ('billing_address', models.TextField(blank=True, verbose_name='Billing Address')),
                ('aws_region', models.CharField(blank=True, default='us-east-1', max_length=30, verbose_name='AWS Region')),
                ('aws_account_id', models.CharField(blank=True, max_length=12, verbose_name='AWS Account ID')),
                ('vpc_id', models.CharField(blank=True, max_length=21, verbose_name='VPC ID')),
                ('subnet_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), blank=True, default=list, size=None, verbose_name='Subnet IDs')),
                ('security_group_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), blank=True, default=list, size=None, verbose_name='Security Group IDs')),
                ('rds_instance_id', models.CharField(blank=True, max_length=63, verbose_name='RDS Instance ID')),
                ('rds_endpoint', models.CharField(blank=True, max_length=255, verbose_name='RDS Endpoint')),
                ('rds_port', models.IntegerField(default=5432, verbose_name='RDS Port')),
                ('rds_database_name', models.CharField(blank=True, max_length=63, verbose_name='RDS Database Name')),
                ('elasticache_cluster_id', models.CharField(blank=True, max_length=50, verbose_name='ElastiCache Cluster ID')),
                ('elasticache_endpoint', models.CharField(blank=True, max_length=255, verbose_name='ElastiCache Endpoint')),
                ('redis_cluster_id', models.CharField(blank=True, max_length=50, verbose_name='Redis Cluster ID')),
                ('redis_endpoint', models.CharField(blank=True, max_length=255, verbose_name='Redis Endpoint')),
                ('redis_port', models.IntegerField(default=6379, verbose_name='Redis Port')),
                ('s3_bucket_name', models.CharField(blank=True, max_length=63, verbose_name='S3 Bucket Name')),
                ('s3_bucket_region', models.CharField(blank=True, max_length=30, verbose_name='S3 Bucket Region')),
                ('kms_key_id', models.CharField(blank=True, max_length=2048, verbose_name='KMS Key ID')),
                ('db_secret_arn', models.CharField(blank=True, max_length=2048, verbose_name='DB Secret ARN')),
                ('redis_secret_arn', models.CharField(blank=True, max_length=2048, verbose_name='Redis Secret ARN')),
                ('deployment_status', models.CharField(choices=[('pending', 'Pending'), ('provisioning', 'Provisioning'), ('active', 'Active'), ('suspended', 'Suspended'), ('terminated', 'Terminated')], default='pending', max_length=20, verbose_name='Deployment Status')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('provisioned_at', models.DateTimeField(blank=True, null=True, verbose_name='Provisioned At')),
                ('activated_at', models.DateTimeField(blank=True, null=True, verbose_name='Activated At')),
                ('provisioning_started_at', models.DateTimeField(blank=True, null=True, verbose_name='Provisioning Started At')),
                ('provisioning_completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Provisioning Completed At')),
                ('suspended_at', models.DateTimeField(blank=True, null=True, verbose_name='Suspended At')),
                ('is_suspended', models.BooleanField(default=False, verbose_name='Is Suspended')),
                ('plan', models.CharField(choices=[('starter', 'Starter'), ('professional', 'Professional'), ('enterprise', 'Enterprise')], default='starter', max_length=50, verbose_name='Plan')),
                ('max_storage_gb', models.IntegerField(default=100, verbose_name='Max Storage GB')),
                ('max_users', models.IntegerField(default=50, verbose_name='Max Users')),
                ('max_api_calls_per_month', models.IntegerField(default=100000, verbose_name='Max API Calls per Month')),
                ('estimated_monthly_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Estimated Monthly Cost')),
                ('hipaa_compliant', models.BooleanField(default=False, verbose_name='HIPAA Compliant')),
                ('is_hipaa_compliant', models.BooleanField(default=False, verbose_name='Is HIPAA Compliant')),
                ('baa_signed_at', models.DateTimeField(blank=True, null=True, verbose_name='BAA Signed At')),
                ('baa_signed_date', models.DateField(blank=True, null=True, verbose_name='BAA Signed Date')),
                ('baa_document', models.FileField(blank=True, null=True, upload_to='baa_documents/', verbose_name='BAA Document')),
                ('data_retention_years', models.IntegerField(default=7, verbose_name='Data Retention Years')),
                ('settings', models.JSONField(blank=True, default=dict, verbose_name='Settings')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_tenants', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TenantEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('provisioned', 'Provisioned'), ('suspended', 'Suspended'), ('reactivated', 'Reactivated'), ('terminated', 'Terminated'), ('user_added', 'User Added'), ('user_removed', 'User Removed'), ('user_role_changed', 'User Role Changed'), ('resource_created', 'Resource Created'), ('resource_deleted', 'Resource Deleted'), ('backup_created', 'Backup Created'), ('backup_restored', 'Backup Restored'), ('error', 'Error')], max_length=50, verbose_name='Event Type')),
                ('description', models.TextField(verbose_name='Description')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='tenants.tenant')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tenant Event',
                'verbose_name_plural': 'Tenant Events',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['tenant', '-created_at'], name='tenants_ten_tenant__2d213f_idx'), models.Index(fields=['event_type', '-created_at'], name='tenants_ten_event_t_bac4f1_idx')],
            },
        ),
        migrations.CreateModel(
            name='TenantInfrastructureResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('resource_type', models.CharField(choices=[('vpc', 'VPC'), ('subnet', 'Subnet'), ('security_group', 'Security Group'), ('rds_instance', 'RDS Instance'), ('elasticache_cluster', 'ElastiCache Cluster'), ('s3_bucket', 'S3 Bucket'), ('kms_key', 'KMS Key'), ('iam_role', 'IAM Role'), ('iam_policy', 'IAM Policy'), ('lambda_function', 'Lambda Function'), ('cloudwatch_log_group', 'CloudWatch Log Group')], max_length=50, verbose_name='Resource Type')),
                ('resource_id', models.CharField(max_length=255, verbose_name='Resource ID')),
                ('resource_arn', models.CharField(blank=True, max_length=2048, verbose_name='Resource ARN')),
                ('status', models.CharField(choices=[('creating', 'Creating'), ('active', 'Active'), ('updating', 'Updating'), ('deleting', 'Deleting'), ('deleted', 'Deleted'), ('failed', 'Failed')], default='creating', max_length=20, verbose_name='Status')),
                ('configuration', models.JSONField(blank=True, default=dict, verbose_name='Configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infrastructure_resources', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Infrastructure Resource',
                'verbose_name_plural': 'Infrastructure Resources',
                'ordering': ['tenant', 'resource_type', 'created_at'],
                'indexes': [models.Index(fields=['tenant', 'resource_type'], name='tenants_ten_tenant__5c16eb_idx'), models.Index(fields=['resource_id'], name='tenants_ten_resourc_892ef9_idx')],
            },
        ),
        migrations.CreateModel(
            name='TenantUsageMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_date', models.DateField(verbose_name='Metric Date')),
                ('database_storage_gb', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Database Storage (GB)')),
                ('s3_storage_gb', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='S3 Storage (GB)')),
                ('compute_hours', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Compute Hours')),
                ('active_users', models.IntegerField(default=0, verbose_name='Active Users')),
                ('total_logins', models.IntegerField(default=0, verbose_name='Total Logins')),
                ('api_requests', models.IntegerField(default=0, verbose_name='API Requests')),
                ('data_transfer_in_gb', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Data Transfer In (GB)')),
                ('data_transfer_out_gb', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Data Transfer Out (GB)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_metrics', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Usage Metric',
                'verbose_name_plural': 'Usage Metrics',
                'ordering': ['tenant', '-metric_date'],
                'indexes': [models.Index(fields=['tenant', '-metric_date'], name='tenants_ten_tenant__d8dcec_idx')],
                'unique_together': {('tenant', 'metric_date')},
            },
        ),
        migrations.CreateModel(
            name='TenantUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('hospital_admin', 'Hospital Administrator'), ('physician', 'Physician'), ('physicist', 'Medical Physicist'), ('dosimetrist', 'Dosimetrist'), ('therapist', 'Radiation Therapist'), ('resident', 'Resident'), ('physics_resident', 'Physics Resident'), ('student', 'Student')], max_length=50, verbose_name='Role')),
                ('license_number', models.CharField(blank=True, help_text='Professional license number', max_length=50, verbose_name='License Number')),
                ('specialty', models.CharField(blank=True, help_text='Medical specialty or area of expertise', max_length=100, verbose_name='Specialty')),
                ('certifications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Professional certifications (e.g., ABR, ABMS)', size=None, verbose_name='Certifications')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('permissions', models.JSONField(blank=True, default=dict, verbose_name='Permissions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('last_login_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Login At')),
                ('supervisor', models.ForeignKey(blank=True, help_text='Supervising physician or physicist for residents/students', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervisees', to='tenants.tenantuser')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_users', to='tenants.tenant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tenant User',
                'verbose_name_plural': 'Tenant Users',
                'ordering': ['tenant', 'user'],
                'unique_together': {('tenant', 'user')},
            },
        ),
    ]
