name: Security Scanning

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight
  push:
    branches: [main, dev, staging]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # ============================================
  # Container Security Scanning
  # ============================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # Dependency Scanning
  # ============================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          pip install -r requirements/production.txt
          safety check --json > safety-report.json || true
          
          # Parse and fail on critical vulnerabilities
          python -c "
          import json
          with open('safety-report.json', 'r') as f:
              report = json.load(f)
              critical = [v for v in report if v.get('severity', '').lower() == 'critical']
              if critical:
                  print(f'Found {len(critical)} critical vulnerabilities')
                  for vuln in critical:
                      print(f\"  - {vuln['package']}: {vuln['advisory']}\")
                  exit(1)
          "

      - name: Run pip-audit
        run: |
          pip-audit --desc --format json --output pip-audit-report.json

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json

  # ============================================
  # SAST (Static Application Security Testing)
  # ============================================
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r mate/ -f json -o bandit-report.json --severity-level medium

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/django
            p/python
            p/owasp-top-ten
          generateSarif: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif

  # ============================================
  # Infrastructure Security Scanning
  # ============================================
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infrastructure/terraform
          format: sarif
          out: tfsec-results.sarif

      - name: Upload tfsec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec-results.sarif

  # ============================================
  # Secrets Scanning
  # ============================================
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ============================================
  # License Compliance Check
  # ============================================
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check licenses
        run: |
          pip install pip-licenses
          pip install -r requirements/production.txt
          pip-licenses --format=json --output-file=licenses.json
          
          # Check for problematic licenses
          python -c "
          import json
          with open('licenses.json', 'r') as f:
              licenses = json.load(f)
              problematic = ['GPL', 'AGPL', 'LGPL']
              issues = []
              for pkg in licenses:
                  license = pkg.get('License', '')
                  if any(p in license for p in problematic):
                      issues.append(f\"{pkg['Name']}: {license}\")
              if issues:
                  print('Found potentially problematic licenses:')
                  for issue in issues:
                      print(f'  - {issue}')
                  exit(1)
          "

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json